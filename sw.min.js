let c = "v2",
  d = [
    "/assets/3rdParty/highlight.min.js",
    "/assets/3rdParty/crate3.min.js",
    "/assets/3rdParty/light.min.css",
    "/assets/3rdParty/cookie.min.js",
    "/assets/3rdParty/dark.min.css",
    "/assets/3rdParty/md5.min.js",
    "/assets/icons/072.png",
    "/assets/icons/096.png",
    "/assets/icons/128.png",
    "/assets/icons/144.png",
    "/assets/icons/152.png",
    "/assets/icons/192.png",
    "/assets/icons/384.png",
    "/assets/icons/512.png",
    "/assets/CPquery.js",
    "/assets/Library.js",
    "/assets/Options.js",
    "/assets/light.css",
    "/assets/dark.css",
    "/PreviewLibrary/index.html",
    "/CPQuerySource/index.html",
    "/LibrarySource/index.html",
    "/SiteOptions/index.html",
    "/Discord/index.html",
    "/PreviewLibrary/",
    "/CPQuerySource/",
    "/LibrarySource/",
    "/SiteOptions/",
    "/Discord/",
    "/manifest.json",
    "/login.html",
    "/logon.html",
    "/index.html",
    "/404.html",
    "/LICENSE",
    "/",
  ];
self["addEventListener"]("install", e => e["waitUntil"](caches["open"](c)["then"](f => f["addAll"](d))["then"](() => self["skipWaiting"]())));
self["addEventListener"]("activate", g => g["waitUntil"](caches["keys"]()["then"](c => Promise["all"](c["map"](i => i != c ? caches["delete"](i) : null)))));
self["addEventListener"]("fetch", j => {
  j.request.mode != 'navigate' ? return : j["respondWith"](fetch(j["request"])["catch"](() => caches["match"](j["request"])));
});